"use strict";(self.webpackChunkqava_docs=self.webpackChunkqava_docs||[]).push([[5702],{7233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var l=n(5893),r=n(1151);const s={sidebar_position:4},i="@qavajs/steps-memory",c={id:"Steps/memory",title:"@qavajs/steps-memory",description:"Steps to work with memory module",source:"@site/docs/Steps/memory.md",sourceDirName:"Steps",slug:"/Steps/memory",permalink:"/docs/Steps/memory",draft:!1,unlisted:!1,editUrl:"https://github.com/qavajs/qavajs.github.io/tree/main/docs/Steps/memory.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"@qavajs/steps-api",permalink:"/docs/Steps/api"},next:{title:"@qavajs/steps-files",permalink:"/docs/Steps/files"}},a={},d=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Steps",id:"steps",level:2},{value:"I expect {string} {memoryValidation} {string}",id:"i-expect-string-memoryvalidation-string",level:3},{value:"I expect every element in {string} array {memoryValidation} {string}",id:"i-expect-every-element-in-string-array-memoryvalidation-string",level:3},{value:"I expect at least {int} elements in {string} array {memoryValidation} {string}",id:"i-expect-at-least-int-elements-in-string-array-memoryvalidation-string",level:3},{value:"I save {string} to memory as {string}",id:"i-save-string-to-memory-as-string",level:3},{value:"I save multiline string to memory as {string}: [Multiline]",id:"i-save-multiline-string-to-memory-as-string-multiline",level:3},{value:"I set {string} = {string}",id:"i-set-string--string",level:3},{value:"I save result of math expression {string} as {string}",id:"i-save-result-of-math-expression-string-as-string",level:3},{value:"I save json to memory as {string}: [Multiline]",id:"i-save-json-to-memory-as-string-multiline",level:3},{value:"I save key-value pairs to memory as {string}: [DataTable]",id:"i-save-key-value-pairs-to-memory-as-string-datatable",level:3},{value:"I expect {string} array to be sorted by {string}",id:"i-expect-string-array-to-be-sorted-by-string",level:3},{value:"I expect {string} {memoryValidation} at least one of {string}",id:"i-expect-string-memoryvalidation-at-least-one-of-string",level:3},{value:"I expect {string} {memoryValidation} at least one of: [DataTable]",id:"i-expect-string-memoryvalidation-at-least-one-of-datatable",level:3},{value:"I expect {string} {memoryValidation} all of {string}",id:"i-expect-string-memoryvalidation-all-of-string",level:3},{value:"I expect {string} {memoryValidation} all of: [DataTable]",id:"i-expect-string-memoryvalidation-all-of-datatable",level:3}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"qavajssteps-memory",children:"@qavajs/steps-memory"})}),"\n",(0,l.jsx)(t.p,{children:"Steps to work with memory module"}),"\n",(0,l.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"npm install @qavajs/steps-memory\n"})}),"\n",(0,l.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"module.exports = {\n    default: {\n        require: [\n            'node_modules/@qavajs/steps-memory/index.js'\n        ]\n    }\n}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-memoryvalidation-string",children:"I expect {string} {memoryValidation} {string}"}),"\n",(0,l.jsx)(t.p,{children:"Verify that value from memory satisfies validation against other value"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value1"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value1"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"42, $value, $currentDate()"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"Function"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"function to verify condition"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to be equal, to be above, to be below"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value2"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value2"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"42, $value, $currentDate()"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"Then I expect '$value' to equal '$anotherValue'\nThen I expect '$value' not to contain '56'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-every-element-in-string-array-memoryvalidation-string",children:"I expect every element in {string} array {memoryValidation} {string}"}),"\n",(0,l.jsx)(t.p,{children:"Verify that every element in array satisfies validation against other value"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"arr"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"array to validate"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"$value, $currentDate()"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"Function"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"function to verify condition"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to be equal, to be above, to be below"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expectedValue"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"42, $value, $currentDate()"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"Then I expect every element in '$arr' array to be above '$expectedValue'\nThen I expect every element in '$arr' array to be above '50'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-at-least-int-elements-in-string-array-memoryvalidation-string",children:"I expect at least {int} elements in {string} array {memoryValidation} {string}"}),"\n",(0,l.jsx)(t.p,{children:"Verify that at least x elements in array pass validation"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expectedNumber"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected number of elements that satisfy validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1,2,3"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"arr"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"array to validate"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"$value, $currentDate()"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"Function"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"function to verify condition"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to be equal, to be above, to be below"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expectedValue"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"any"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"42, $value, $currentDate()"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"Then I expect at least 1 element(s) in '$arr' array to be above '$expectedValue'\nThen I expect at least 2 element(s) in '$arr' array to be above '50'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-save-string-to-memory-as-string",children:"I save {string} to memory as {string}"}),"\n",(0,l.jsx)(t.p,{children:"Set memory value"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I save 'value' to memory as 'key'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-save-multiline-string-to-memory-as-string-multiline",children:"I save multiline string to memory as {string}: [Multiline]"}),"\n",(0,l.jsx)(t.p,{children:"Set multiline memory value"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.p,{children:"example:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:'When I save multiline string to memory as \'multilineString\':\n  """\n  foo\n  bar\n  """\n'})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-set-string--string",children:"I set {string} = {string}"}),"\n",(0,l.jsx)(t.p,{children:"Save value to memory"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"value"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I set 'key' = 'value'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-save-result-of-math-expression-string-as-string",children:"I save result of math expression {string} as {string}"}),"\n",(0,l.jsx)(t.p,{children:"Save result of math expression and save result to memory"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expression"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expression to evaluate"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:(0,l.jsx)(t.code,{children:"{$var} + 1"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I save result of math expression '{$variable} + 42' as 'result'\nWhen I save result of math expression '{$random()} * 100' as 'result'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-save-json-to-memory-as-string-multiline",children:"I save json to memory as {string}: [Multiline]"}),"\n",(0,l.jsx)(t.p,{children:"Save json value to memory (as JS object)"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"json"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"multi string with json"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:(0,l.jsx)(t.code,{children:'{"key" : "value"}'})})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:'When I save json to memory as \'object\':\n    """\n    {\n        "someKey": "someValue",\n        "otherKey": 42\n    }\n    """\nThen I expect \'$object.someKey\' to equal \'someValue\'\n'})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-save-key-value-pairs-to-memory-as-string-datatable",children:"I save key-value pairs to memory as {string}: [DataTable]"}),"\n",(0,l.jsx)(t.p,{children:"Save key-value pairs provided as Data Table to memory (as JS object)"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"kv"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"key-value pairs"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I save key-value pairs to memory as 'key':\n    | someKey      | 42               |\n    | someOtherKey | $valueFromMemory |\nThen I expect '$object.someKey' to equal '42'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-array-to-be-sorted-by-string",children:"I expect {string} array to be sorted by {string}"}),"\n",(0,l.jsxs)(t.p,{children:["Verify that array is sorted by provided comparator provided as reference to function\n",(0,l.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description",children:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description"})]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"arr"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"memory key of array"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"comparator"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"memory key of sort comparator function"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I expect '$arr' array to be sorted by '$ascending'\n"})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-javascript",children:"// memory/index.js\nclass Memory {\n    ascending = (a, b) => a - b; //implementation of comparator function\n}\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-memoryvalidation-at-least-one-of-string",children:"I expect {string} {memoryValidation} at least one of {string}"}),"\n",(0,l.jsx)(t.p,{children:"Verify that the value satisfies validation with at least one value from the array"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual value or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string, $value"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to equal, to match, etc."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"array of expected values or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"$js([1,2,3]), $expected"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I expect '$text' to equal at least one of '$js([\"free\", \"11.99\"])'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-memoryvalidation-at-least-one-of-datatable",children:"I expect {string} {memoryValidation} at least one of: [DataTable]"}),"\n",(0,l.jsx)(t.p,{children:"Verify that the value satisfies validation with at least one value from the array"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual value or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string, $value"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to equal, to match, etc."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"DataTable"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"data table of expected values or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I expect '$text' to equal at least one of:\n    | free  |\n    | 11.99 |\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-memoryvalidation-all-of-string",children:"I expect {string} {memoryValidation} all of {string}"}),"\n",(0,l.jsx)(t.p,{children:"Verify that the value satisfies validation with all values from the array"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual value or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string, $value"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to equal, to match, etc."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"array of expected values or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"$js([1,2,3]), $expected"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I expect '$text' not to equal all of '$js([\"free\", \"10.00\"])'\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"i-expect-string-memoryvalidation-all-of-datatable",children:"I expect {string} {memoryValidation} all of: [DataTable]"}),"\n",(0,l.jsx)(t.p,{children:"Verify that the value satisfies validation with all values from the array"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"param"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"description"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"actual value or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string, $value"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"validation"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"to equal, to match, etc."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"expected"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"DataTable"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"data table of expected values or memory key"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"$js([1,2,3]), $expected"})]})]})]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-gherkin",children:"When I expect '$text' not to equal all of:\n    | free  |\n    | 10.00 |\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>i});var l=n(7294);const r={},s=l.createContext(r);function i(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);